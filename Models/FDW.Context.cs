//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebTest.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FoodDistribute_DWEntities : DbContext
    {
        public FoodDistribute_DWEntities()
            : base("name=FoodDistribute_DWEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<MVC_User> MVC_User { get; set; }
    
        public virtual ObjectResult<PrePack_Forecast_GridSet_Result> PrePack_Forecast_GridSet(Nullable<System.DateTime> forecastdate)
        {
            var forecastdateParameter = forecastdate.HasValue ?
                new ObjectParameter("forecastdate", forecastdate) :
                new ObjectParameter("forecastdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrePack_Forecast_GridSet_Result>("PrePack_Forecast_GridSet", forecastdateParameter);
        }
    
        public virtual ObjectResult<PrePack_ForecastUpsert_Result> PrePack_ForecastUpsert(Nullable<int> rid, Nullable<System.DateTime> forecastdate, string productcode, string um, Nullable<decimal> forecastvalue, Nullable<decimal> actualvalue, Nullable<int> userid, Nullable<decimal> startingqoh)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            var forecastdateParameter = forecastdate.HasValue ?
                new ObjectParameter("forecastdate", forecastdate) :
                new ObjectParameter("forecastdate", typeof(System.DateTime));
    
            var productcodeParameter = productcode != null ?
                new ObjectParameter("productcode", productcode) :
                new ObjectParameter("productcode", typeof(string));
    
            var umParameter = um != null ?
                new ObjectParameter("um", um) :
                new ObjectParameter("um", typeof(string));
    
            var forecastvalueParameter = forecastvalue.HasValue ?
                new ObjectParameter("forecastvalue", forecastvalue) :
                new ObjectParameter("forecastvalue", typeof(decimal));
    
            var actualvalueParameter = actualvalue.HasValue ?
                new ObjectParameter("actualvalue", actualvalue) :
                new ObjectParameter("actualvalue", typeof(decimal));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var startingqohParameter = startingqoh.HasValue ?
                new ObjectParameter("startingqoh", startingqoh) :
                new ObjectParameter("startingqoh", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrePack_ForecastUpsert_Result>("PrePack_ForecastUpsert", ridParameter, forecastdateParameter, productcodeParameter, umParameter, forecastvalueParameter, actualvalueParameter, useridParameter, startingqohParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MVC_GetUser_BuyerID(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MVC_GetUser_BuyerID", userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MVC_GetUser_RepID(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MVC_GetUser_RepID", userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MVC_GetUserID(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MVC_GetUserID", userNameParameter);
        }
    }
}
